{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example 3: Urban climate adaption"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyclmuapp import usp_clmu\n",
    "import matplotlib.pyplot as plt\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## usp mode: user forcing mode\n",
    "\n",
    "\n",
    "workflow\n",
    "1. initialize\n",
    "   \n",
    "    note: the docker container (named **myclmu**) should be running and bind the input_path, output_path, log_path and scripts_path\n",
    "    if not use the `usp.docker(cmd='run')` to start the container, this will help to bind above paths automatically.\n",
    "2. check domian\n",
    "3. check forcing\n",
    "   \n",
    "   must define the forcing file\n",
    "4. run case"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1 initial case"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we use the `RUN_TYPE= \"branch\"` to avoid the repeated spinup phases.\n",
    "\n",
    "The case (`usp_spinup`) is run for 10 years to spinup the model.\n",
    "\n",
    "How to get `usp_spinup` ?\n",
    "\n",
    "```python\n",
    "usp_spinup = usp.run(\n",
    "            output_prefix= \"_clm.nc\",\n",
    "            case_name = \"usp_spinup\", \n",
    "            RUN_STARTDATE = \"2002-01-01\",\n",
    "            STOP_OPTION = \"nyears\", \n",
    "            STOP_N = \"10\",\n",
    "            RUN_TYPE= \"coldstart\",\n",
    "            iflog = True,\n",
    "            logfile = \"log.log\",\n",
    "            run_tyep=\"usp-exec\"#\"case\", when docker container is not start)\n",
    "        )\n",
    "usp_spinup\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Folder 'inputfolder' already exists.\n",
      "Folder 'outputfolder' already exists.\n",
      "Folder 'logfolder' already exists.\n",
      "Folder 'scriptsfolder' already exists.\n",
      "Folder '/Users/user/Documents/GitHub/pyclmuapp/docs/notebooks/usp/inputfolder/usp' created successfully!\n"
     ]
    }
   ],
   "source": [
    "# initialize\n",
    "usp = usp_clmu(\n",
    "    pwd=os.getcwd(),\n",
    "    container_type='docker')\n",
    "\n",
    "# before running container, you need the image\n",
    "# usp.docker(\"pull\") # to pull the docker image if you don't have it\n",
    "\n",
    "usp.docker(\"run\") # run the docker container"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Copying the file forcing.nc to the /Users/user/Documents/GitHub/pyclmuapp/docs/notebooks/usp/inputfolder/usp\n",
      "CPU times: user 247 ms, sys: 60.6 ms, total: 308 ms\n",
      "Wall time: 2min 5s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/Users/user/Documents/GitHub/pyclmuapp/docs/notebooks/usp/outputfolder/lnd/hist/example3_clm0_2024-09-24_14-08-54_clm.nc']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# check surface\n",
    "usp.check_surf() # use the default surface data of London\n",
    "# use usp.check_surf(usr_surf=\"sufdata.nc\") to use the user provided surface data\n",
    "\n",
    "\n",
    "# check the domain\n",
    "# the domain file will be revised according to the surface data if usr_domain is not provided\n",
    "# do this after check_surf\n",
    "# because the surfdata should be provided to read the domain file\n",
    "usp.check_domain()\n",
    "\n",
    "\n",
    "#Â check the forcing\n",
    "# this forcing derived from urban-plumber forcing data\n",
    "usp.check_forcing(\n",
    "    usr_forcing=\"forcing.nc\")\n",
    "\n",
    "usp_or = usp.run(\n",
    "            output_prefix= \"_clm.nc\",\n",
    "            case_name = \"example3\", \n",
    "            RUN_STARTDATE = \"2012-01-01\",\n",
    "            STOP_OPTION = \"nyears\", \n",
    "            STOP_N = \"2\",\n",
    "            RUN_TYPE= \"branch\",\n",
    "            RUN_REFCASE= \"usp_spinup\", # the case name of the spinup run\n",
    "            RUN_REFDATE= \"2012-01-01\",\n",
    "            iflog = True,\n",
    "            logfile = \"log.log\",\n",
    "            run_tyep=\"usp-exec\"#\"case\", when docker container is not start)\n",
    "        )\n",
    "usp_or"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2 explore the urban adaptation to urban climate\n",
    "\n",
    "workflow:\n",
    "\n",
    "1. case2: modify the urban roof albedo --> simulate the white/cooling roof for urban adaptation\n",
    "   \n",
    "2. case3: modify the forcing --> simulate global warming\n",
    "   \n",
    "3. case4: modify forcing and urban roof albedo --> white roof effect under global warming"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**how to change the surface data?**\n",
    "\n",
    "```python\n",
    "# change the surface data\n",
    "usp_clmu.modify_surf(\n",
    "    action=action,    # dict like result of usp_clmu.check_surf_data() \n",
    "                      #or usp_clmu.surfdata_dict\n",
    "    mode=\"replace\", # optional; the default is \"replace\"\n",
    "    usr_surfdata=None, # optional; the path to the new surfdata file, \n",
    "                       #the default is \"surfdata.nc\" provided by pyclmuapp\n",
    "    surfata_name=\"surface_replaced.nc\" # optional; output file name, \n",
    "                                       # the default is \"surfdata.nc\"\n",
    ")\n",
    "```\n",
    "\n",
    "Args:\n",
    "- usr_surfdata (str): The path to the user-defined surface data file. The default is None.\n",
    "- action (dict): The dictionary of the revised surface data for the urban surface parameters. The default is None, which means no action.\n",
    "- mode (str): The mode for the revision. The default is \"replace\".\n",
    "- surfata_name (str): The name of the revised surface data file. The default is \"surfdata.nc\".\n",
    "- urban_type (int): The type of the urban surface. The default is 2. 0 is for TBD urban, 1 is for HD urban, and 2 is for MD urban."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 782 ms, sys: 216 ms, total: 999 ms\n",
      "Wall time: 3min 32s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# modify the surface\n",
    "usp.modify_surf(action={\"ALB_ROOF_DIR\":0.2}, surfata_name=\"surface_modfied.nc\", mode=\"add\")\n",
    "usp_surf = usp.run(\n",
    "            output_prefix= \"_clm.nc\",\n",
    "            case_name = \"example3\", \n",
    "            RUN_STARTDATE = \"2012-01-01\",\n",
    "            STOP_OPTION = \"nyears\", \n",
    "            STOP_N = \"2\",\n",
    "            RUN_TYPE= \"branch\",\n",
    "            RUN_REFCASE= \"usp_spinup\", # the case name of the spinup run\n",
    "            RUN_REFDATE= \"2012-01-01\",\n",
    "            iflog = True,\n",
    "            logfile = \"log.log\",\n",
    "            run_tyep=\"usp-exec\"#\"case\", when docker container is not start)\n",
    "        )\n",
    "\n",
    "# modify the forcing\n",
    "usp.modify_forcing(action={\"Tair\": 1}, mode=\"add\", forcing_name=\"forcing_replaced.nc\")\n",
    "usp_warming_surf = usp.run(\n",
    "            output_prefix= \"_clm.nc\",\n",
    "            case_name = \"example3\", \n",
    "            RUN_STARTDATE = \"2012-01-01\",\n",
    "            STOP_OPTION = \"nyears\", \n",
    "            STOP_N = \"2\",\n",
    "            RUN_TYPE= \"branch\",\n",
    "            RUN_REFCASE= \"usp_spinup\", # the case name of the spinup run\n",
    "            RUN_REFDATE= \"2012-01-01\",\n",
    "            iflog = True,\n",
    "            logfile = \"log.log\",\n",
    "            run_tyep=\"usp-exec\"#\"case\", when docker container is not start)\n",
    "        )\n",
    "\n",
    "# recover the surface\n",
    "usp.modify_surf(action={\"ALB_ROOF_DIR\":-0.2}, surfata_name=\"surface_modfied.nc\", mode=\"add\")\n",
    "usp_warming = usp.run(\n",
    "            output_prefix= \"_clm.nc\",\n",
    "            case_name = \"example3\", \n",
    "            RUN_STARTDATE = \"2012-01-01\",\n",
    "            STOP_OPTION = \"nyears\", \n",
    "            STOP_N = \"2\",\n",
    "            RUN_TYPE= \"branch\",\n",
    "            RUN_REFCASE= \"usp_spinup\", # the case name of the spinup run\n",
    "            RUN_REFDATE= \"2012-01-01\",\n",
    "            iflog = True,\n",
    "            logfile = \"log.log\",\n",
    "            run_tyep=\"usp-exec\"#\"case\", when docker container is not start)\n",
    "        )\n",
    "# recover the forcing\n",
    "usp.modify_forcing(action={\"Tair\": -1}, mode=\"add\", forcing_name=\"forcing_replaced.nc\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['/Users/user/Documents/GitHub/pyclmuapp/docs/notebooks/usp/outputfolder/lnd/hist/example3_clm0_2024-09-24_14-08-54_clm.nc']\n",
      "['/Users/user/Documents/GitHub/pyclmuapp/docs/notebooks/usp/outputfolder/lnd/hist/example3_clm0_2024-09-24_14-12-26_clm.nc']\n",
      "['/Users/user/Documents/GitHub/pyclmuapp/docs/notebooks/usp/outputfolder/lnd/hist/example3_clm0_2024-09-24_14-10-07_clm.nc']\n",
      "['/Users/user/Documents/GitHub/pyclmuapp/docs/notebooks/usp/outputfolder/lnd/hist/example3_clm0_2024-09-24_14-11-17_clm.nc']\n"
     ]
    }
   ],
   "source": [
    "print(usp_or)\n",
    "print(usp_warming)\n",
    "print(usp_surf)\n",
    "print(usp_warming_surf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**use `usp_clmu.nc_view()` to read the output files**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "ds_or_usp = usp.nc_view(usp_or[0])\n",
    "ds_warming_usp = usp.nc_view(usp_warming[0])\n",
    "ds_surf_usp = usp.nc_view(usp_surf[0])\n",
    "ds_warming_surf_usp = usp.nc_view(usp_warming_surf[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3 Plotting\n",
    "\n",
    "Note: ploting with time will need the `nc-time-axis` package, which can be installed by `pip install nc-time-axis` or `conda install nc-time-axis`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(6, 5))\n",
    "ax = fig.add_subplot(111)\n",
    "\n",
    "# plot the original\n",
    "dd = (ds_surf_usp['TSA']-ds_or_usp['TSA']).isel(gridcell=0).groupby('time.hour')\n",
    "mean = dd.mean('time')\n",
    "var = dd.var('time')\n",
    "mean.plot(ax=ax, label='Original', color='#3964DF')\n",
    "ax.fill_between(mean['hour'].values, mean - var, mean + var, alpha=0.3, color='#3964DF')\n",
    "\n",
    "# plot the warming\n",
    "dd = (ds_warming_surf_usp['TSA']-ds_warming_usp['TSA']).isel(gridcell=0).groupby('time.hour')\n",
    "mean = dd.mean('time')\n",
    "var = dd.var('time')\n",
    "mean.plot(ax=ax, label='Warming 1 K', color='#E02927')\n",
    "ax.fill_between(mean['hour'].values, mean - var, mean + var, alpha=0.3, color='#E02927')\n",
    "\n",
    "ax.set_xlabel('Hour of day', fontsize=14)\n",
    "ax.set_ylabel('Temperature difference [K]', fontsize=14)\n",
    "ax.tick_params(axis='both', which='major', labelsize=12)\n",
    "ax.set_title('')\n",
    "ax.legend(frameon=False, fontsize=12)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('figs/example3_usp.pdf', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "usp.case_clean(case_name=\"example3\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**stop and remove the container**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "usp.docker(\"stop\")\n",
    "usp.docker(\"rm\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "u_climate_yjj",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
